// Generated by CoffeeScript 1.9.3
(function() {
  var charts, columns, filter_data, height, original_data, outer_height, outer_width, padding, scale_x, scale_y, width;

  padding = {
    left: 40,
    top: 20,
    right: 0,
    bottom: 20
  };

  height = 300;

  width = 500;

  outer_height = height + padding.top + padding.bottom;

  outer_width = width + padding.left + padding.right;

  columns = [1, 2, 3, 4];

  charts = d3.select(".container").style("width", (outer_width * 2) + "px").append("svg").attr("width", outer_width * 2).attr("height", outer_height * 2).selectAll("g").data(columns).enter().append("g").attr("transform", function(d, i) {
    return "translate(" + (i % 2 * outer_width + padding.left) + "," + (Math.floor(i / 2) * outer_height + padding.top) + ")";
  });

  original_data = null;

  scale_x = [];

  scale_y = [];

  filter_data = function(class_name, index, range) {
    var filtered;
    filtered = original_data.filter(function(e) {
      var ref;
      return (range[0] <= (ref = e[index]) && ref < range[1]);
    });
    return charts.each(function(i) {
      var data, x, y;
      x = scale_x[i];
      y = scale_y[i];
      data = filtered.map(function(e) {
        return e[i];
      });
      data = d3.layout.histogram().bins(x.ticks(10))(data).map(function(e) {
        return {
          x: e.x,
          y: e.y,
          dx: e.dx
        };
      });
      d3.select(this).selectAll("rect." + class_name).data(data).enter().append("rect").attr("class", "" + class_name).attr("x", function(d) {
        return x(d.x) + 1;
      }).attr("width", function(d) {
        return x(d.x + d.dx) - x(d.x) - 2;
      });
      return d3.select(this).selectAll("rect." + class_name).attr("y", function(d) {
        return y(d.y);
      }).attr("height", function(d) {
        return height - y(d.y);
      });
    });
  };

  d3.text("int.txt", function(e, _data) {
    if (e) {
      throw e;
    }
    original_data = _data.split("\n").map(function(e) {
      return e.split("\t").map(function(e) {
        return +e + 1;
      });
    });
    charts.each(function(i) {
      var data, x, xAxis, y, yAxis;
      data = original_data.map(function(e) {
        return e[i];
      });
      x = d3.scale.log().base(2).domain(d3.extent(data)).range([0, width]);
      scale_x[i] = x;
      data = d3.layout.histogram().bins(x.ticks(10))(data).map(function(e) {
        return {
          x: e.x,
          y: e.y,
          dx: e.dx
        };
      });
      y = d3.scale.linear().domain([
        0, d3.max(data, function(e) {
          return e.y;
        })
      ]).range([height, 0]);
      scale_y[i] = y;
      xAxis = d3.svg.axis().scale(x).orient("bottom");
      yAxis = d3.svg.axis().scale(y).orient("left");
      d3.select(this).selectAll("rect").data(data).enter().append("rect").attr("x", function(d) {
        return x(d.x) + 1;
      }).attr("y", function(d) {
        return y(d.y);
      }).attr("width", function(d) {
        return x(d.x + d.dx) - x(d.x) - 2;
      }).attr("height", function(d) {
        return height - y(d.y);
      });
      d3.select(this).on("click", function(d) {
        if (d3.event.target.__data__) {
          d = d3.event.target.__data__;
          return filter_data("click", i, [d.x, d.x + d.dx]);
        } else {
          return filter_data("click", i, [0, 0]);
        }
      }).on("mouseover", function(d) {
        if (d3.event.target.__data__) {
          d = d3.event.target.__data__;
          return filter_data("hover", i, [d.x, d.x + d.dx]);
        }
      });
      d3.select(this).append("g").attr("class", "x axis").attr("transform", "translate(0," + height + ")").call(xAxis);
      return d3.select(this).append("g").attr("class", "y axis").call(yAxis).append("text").attr("transform", "rotate(-90)").attr("y", 6).attr("dy", ".71em").attr("class", "label").text("Count");
    });
    return filter_data("click", 1, [0, 0]);
  });

}).call(this);
